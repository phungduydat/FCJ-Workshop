[{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/2-prerequiste/2.1.1-createec2/","title":" Hướng Dẫn Tạo EC2 Instance Default Trên AWS","tags":[],"description":"","content":"  🖥️ Hướng Dẫn Tạo EC2 Instance Default Trên AWS 📌 Mục Tiêu Tạo một EC2 instance sử dụng cấu hình mặc định để triển khai ứng dụng hoặc kiểm thử môi trường.\n🧰 Yêu Cầu Trước Khi Bắt Đầu  Tài khoản AWS hợp lệ Đăng nhập AWS Console hoặc cài sẵn AWS CLI Tạo key pair để SSH (nếu cần)  🛠️ Các Bước Thực Hiện 1. Đăng Nhập AWS Console Truy cập: https://console.aws.amazon.com/ec2/\n2. Tạo EC2 Instance Cách 1: Qua AWS Console  Vào EC2 Dashboard Nhấn Launch Instance Nhập tên: MyEC2Default Chọn AMI: Amazon Linux 2023 (hoặc Amazon Linux 2) Loại Instance: t2.micro (Free tier) Key pair: Chọn hoặc tạo mới Network Settings:  Allow SSH (port 22) Allow HTTP (port 80) nếu cần   Ổ đĩa: Mặc định 8 GB (gp2) Nhấn Launch Instance   Cách 2: Dùng AWS CLI aws ec2 run-instances --image-id ami-0c02fb55956c7d316 \\ # Amazon Linux 2 (us-east-1) --instance-type t2.micro --key-name my-key --security-groups default --tag-specifications \u0026#39;ResourceType=instance,Tags=[{Key=Name,Value=MyEC2Default}]\u0026#39;  📝 Ghi chú: Thay ami-xxxx và my-key bằng ID và key pair tương ứng trong region của bạn.\n 3. Kết Nối EC2 Bằng SSH ssh -i my-key.pem ec2-user@\u0026lt;public-ip\u0026gt; ✅ Kết Quả  EC2 instance được tạo và chạy trong vài phút. Có thể SSH để cài đặt thêm hoặc triển khai ứng dụng.   🧹 Mẹo Quản Lý  Tắt hoặc terminate instance sau khi dùng để tránh mất phí. Gắn Elastic IP nếu muốn giữ IP cố định.  📚 Tài Liệu Tham Khảo  EC2 User Guide Amazon Linux AMI  "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/1-introduce/","title":"Giới thiệu","tags":[],"description":"","content":"Trong bối cảnh vận hành hệ thống hiện đại – nơi tốc độ triển khai nhanh, khả năng phục hồi cao và tính sẵn sàng 24/7 là yếu tố bắt buộc – việc chỉ giám sát thủ công hay gửi cảnh báo cơ bản đã không còn đủ.\nCác hệ thống ngày nay cần một giải pháp giám sát thông minh, có khả năng:\n Phát hiện sớm bất thường Phản ứng tự động Hỗ trợ quy trình leo thang khi sự cố vượt quá mức cho phép   🕵️‍♂️ Continuous Monitoring là gì? Continuous Monitoring (giám sát liên tục) là quá trình thu thập, phân tích và theo dõi dữ liệu từ các hệ thống, ứng dụng và hạ tầng một cách tự động, liên tục và theo thời gian thực nhằm đảm bảo:\n Hệ thống luôn sẵn sàng và ổn định Phát hiện sự cố nhanh chóng Cung cấp thông tin kịp thời cho phản hồi hoặc xử lý tự động  Trong DevOps, Continuous Monitoring giúp nhóm vận hành:\n Theo dõi hiệu suất ứng dụng sau khi triển khai (post-deployment) Phân tích hành vi bất thường hoặc lỗi (anomaly detection) Cải thiện thời gian phản hồi (MTTR – Mean Time To Resolution)   🚨 Alerting là gì? Alerting (cảnh báo) là quy trình tạo ra các thông báo tự động khi có sự kiện bất thường hoặc vượt ngưỡng trong hệ thống.\nMột hệ thống alerting hiệu quả sẽ:\n Theo dõi metrics hoặc logs Gửi cảnh báo qua email, Slack, SMS, SNS, PagerDuty hoặc các công cụ khác Kích hoạt phản hồi tự động hoặc thông báo đến đội ngũ kỹ thuật  Yêu cầu của hệ thống cảnh báo hiệu quả:\n Chính xác: tránh cảnh báo sai (false positive) Kịp thời: phản ứng ngay khi phát hiện sự cố Có ngữ cảnh: đầy đủ thông tin giúp điều tra nguyên nhân Có quy trình leo thang (escalation) rõ ràng theo mức độ nghiêm trọng  🎯 Mục tiêu Workshop Workshop này sẽ trang bị cho bạn những kiến thức và kỹ năng cần thiết để triển khai hệ thống giám sát thông minh cho môi trường DevOps:\n ✅ Implement Intelligent Monitoring \u0026amp; Alerting System cho DevOps Processes Từ việc thu thập metrics, logs, traces đến thiết lập cảnh báo và phản hồi, bạn sẽ xây dựng một hệ thống giúp đội ngũ DevOps:\n Chủ động phát hiện vấn đề Giảm thời gian phản hồi (MTTR) Cải thiện độ tin cậy và tính khả dụng của hệ thống   ✅ Anomaly Detection Tích hợp các thuật toán và công cụ phát hiện bất thường để:\n Sớm nhận biết các hành vi lạ hoặc bất thường trong hệ thống Ngăn chặn sự cố trước khi chúng trở nên nghiêm trọng   ✅ Automated Response Thiết lập các phản hồi tự động giúp hệ thống:\n Tự phục hồi (auto-healing) khi gặp lỗi Tự điều chỉnh (auto-scaling) khi tải tăng Giảm thiểu tối đa sự can thiệp thủ công   ✅ Escalation Procedures Xây dựng quy trình cảnh báo theo cấp giúp:\n Đảm bảo đúng người nhận cảnh báo đúng lúc Tránh \u0026ldquo;alert fatigue\u0026rdquo; (mệt mỏi vì cảnh báo) Tăng hiệu quả trong quản lý sự cố   🛠 Nội dung Workshop 📚 Nội dung Workshop  Monitoring Implementation Anomaly Detection Automated Response Escalation Procedures Dashboard Development Alert Tuning Operational Procedures Performance Optimization   🧠 Mục tiêu cuối cùng: Giúp bạn triển khai một hệ thống giám sát thông minh, tự động, sẵn sàng cho môi trường sản xuất thật.\n "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/","title":"Quản lý Phiên Làm Việc (Session Management)","tags":[],"description":"","content":"Làm việc với Amazon Systems Manager - Session Manager Tổng quan Amazon Systems Manager – Session Manager là một dịch vụ được AWS quản lý toàn phần, cho phép truy cập shell hoặc CLI an toàn, có khả năng ghi lại và theo dõi, trực tiếp từ trình duyệt đến các phiên bản Amazon EC2 và các tài nguyên AWS khác mà không cần mở cổng inbound (như SSH hoặc RDP).\nTrong bài lab này, bạn sẽ:\n Tìm hiểu các khái niệm cốt lõi của Session Manager và vai trò của nó trong quản trị hệ thống an toàn. Thực hành kết nối tới các EC2 instance public và private trong VPC mà không cần sử dụng bastion host. Khám phá các tính năng ghi log và kiểm toán tích hợp với AWS CloudTrail và Amazon S3 để đảm bảo tuân thủ. Hiểu cách Session Manager giúp cải thiện bảo mật bằng cách loại bỏ kết nối inbound trực tiếp và tập trung hóa kiểm soát truy cập.  Bài thực hành này sẽ giúp các nhóm DevOps giảm thiểu rủi ro vận hành, đơn giản hóa việc quản lý truy cập hạ tầng, và nâng cao khả năng giám sát bảo mật tổng thể.\nNội dung  Giới thiệu Yêu cầu chuẩn bị Triển khai Giám sát Phát hiện Bất thường Phản hồi Tự động Quy trình Leo thang Sự cố Phát triển Dashboard Quy trình Vận hành  Dọn dẹp Tài nguyên  "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/2-prerequiste/2.1.4-createvpc/","title":" Chuẩn Bị Môi Trường Tạo Docker Image Cho Dự Án Spring Boot","tags":[],"description":"","content":"  🔧 1. Cài Đặt Java (OpenJDK 21) Để chạy được ứng dụng Spring Boot và build ra file .jar, bạn cần Java JDK 21.\n# Cập nhật danh sách gói phần mềm và nâng cấp hệ thống sudo yum update -y # Cài đặt Java OpenJDK 21 sudo amazon-linux-extras enable corretto8 sudo yum install -y java-21-amazon-corretto-devel # Kiểm tra phiên bản đã cài đặt java -version  🔧 2. Cài Đặt Maven 📥 Tải Maven Tải xuống tệp nhị phân Maven mới nhất (phiên bản 3.9.11 tính đến tháng 7/2025):\nsudo yum install java-11-amazon-corretto-devel wget https://archive.apache.org/dist/maven/maven-3/3.9.1/binaries/apache-maven-3.9.1-bin.tar.gz 📦 Giải Nén Maven tar xzvf apache-maven-3.9.1-bin.tar.gz sudo mv apache-maven-3.9.1 /opt/ ⚙️ Cấu Hình Biến Môi Trường echo \u0026#39;export M2_HOME=/opt/apache-maven-3.9.1\u0026#39; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#39;export PATH=$PATH:$M2_HOME/bin\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc ✅ Kiểm Tra Maven mvn -version  🐳 3. Cài Đặt Docker 🧹 Gỡ Docker Cũ (nếu có) sudo dnf remove -y docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine 📦 Cài Gói Phụ Thuộc sudo dnf install -y dnf-plugins-core device-mapper-persistent-data lvm2 🗂️ Thêm Kho Docker CE sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo sudo sed -i \u0026#39;s/$releasever/41/g\u0026#39; /etc/yum.repos.d/docker-ce.repo 🐳 Cài Docker 28.1.1 sudo dnf install -y docker-ce-28.1.1 docker-ce-cli-28.1.1 containerd.io docker-buildx-plugin docker-compose-plugin Nếu không thấy phiên bản 28.1.1:\ndnf list --showduplicates docker-ce 🚀 Khởi Động Docker sudo systemctl start docker sudo systemctl enable docker  🧱 4. Cài Đặt Docker Compose sudo curl -L \u0026#34;https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker-compose --version 📆 5. Cài Đặt Git \u0026amp; Clone Dự Án sudo yum install -y git git clone https://github.com/phungduydat/webenglish.git cd webenglish  🚰 6. Build Spring Boot (Bỏ Qua Test) mvn clean package -DskipTests File jar sẽ nằm trong thư mục target/.\n 📄 7. Tạo File Dockerfile FROMopenjdk:21-jdkARG JAR_FILE=target/*.jarCOPY ${JAR_FILE} app.jarENTRYPOINT [\u0026#34;java\u0026#34;,\u0026#34;-jar\u0026#34;,\u0026#34;/app.jar\u0026#34;] 🧩 8. Tạo File docker-compose.yml services: mysql: image: mysql:8.0 container_name: mysql restart: always environment: MYSQL_ROOT_PASSWORD: 123456 MYSQL_DATABASE: webenglish ports: - \u0026#34;3306:3306\u0026#34; volumes: - mysql_data:/var/lib/mysql app: build: . container_name: webenglish-app ports: - \u0026#34;8080:8090\u0026#34; depends_on: - mysql environment: SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/webenglish SPRING_DATASOURCE_USERNAME: root SPRING_DATASOURCE_PASSWORD: 123456 volumes: - ./src/main/resources:/app/resources volumes: mysql_data:  ⚙️ 9. Cấu Hình application.properties spring.datasource.url=${SPRING_DATASOURCE_URL}\rspring.datasource.username=${SPRING_DATASOURCE_USERNAME}\rspring.datasource.password=${SPRING_DATASOURCE_PASSWORD}\r 🧪 10. Build \u0026amp; Run Docker Compose docker compose up --build Kiểm tra:\ndocker ps docker compose logs  Tác giả: Phùng Duy Đạt\nGitHub: https://github.com/phungduydat/webenglish\n"},{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/2-prerequiste/","title":"Các bước Chuẩn bị Môi trường AWS","tags":[],"description":"","content":"\rĐể triển khai ứng dụng container hóa lên AWS, bạn cần thiết lập một môi trường bao gồm EC2 để chạy Docker, liên kết với Amazon ECR để lưu trữ image, và sử dụng AWS CDK để tự động hóa quy trình triển khai. Cuối cùng, bạn có thể kiểm tra ứng dụng trực tiếp trên trình duyệt.\n\r 💡 Nếu bạn chưa quen với các dịch vụ trong hướng dẫn này, hãy xem thêm:\n  Giới thiệu về Amazon EC2 Tổng quan về Amazon Elastic Container Registry (ECR) AWS Cloud Development Kit (CDK)   🚀 Nội dung Thực hiện Trong phần này, bạn sẽ từng bước xây dựng môi trường triển khai hoàn chỉnh:\n  Khởi tạo EC2 và cài đặt Docker\n→ Tạo instance EC2, thiết lập môi trường cần thiết để chạy container.\n  Build image và đưa lên Amazon ECR\n→ Đăng nhập ECR, build Docker image và đẩy lên registry an toàn.\n  Triển khai dự án bằng AWS CDK\n→ Viết mã hạ tầng dưới dạng code (IaC) để tự động hóa triển khai.\n  Truy cập ứng dụng từ trình duyệt\n→ Kiểm tra kết quả triển khai qua giao diện web.\n   👉 Sau khi hoàn thành các bước này, bạn sẽ có một môi trường sẵn sàng để phát triển, triển khai và kiểm thử ứng dụng container hóa trên nền tảng AWS.\n"},{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/2-prerequiste/2.1.2-createpublicsubnet/","title":"Deploying a Docker Image to AWS ECR on Linux ","tags":[],"description":"","content":"🎯 Mục Tiêu Hướng dẫn cài đặt AWS CLI, cấu hình tài khoản AWS, tạo repository trên Amazon ECR, và đẩy Docker image từ máy local (bao gồm cả image MySQL) lên ECR.\n 🧰 1. Cài Đặt AWS CLI Trên Linux Chạy các lệnh sau để cài đặt AWS CLI v2:\n# Tải AWS CLI v2 curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; # Giải nén unzip awscliv2.zip # Cài đặt sudo ./aws/install # Kiểm tra phiên bản aws --version  ⚙️ 2. Cấu Hình AWS CLI Sau khi cài đặt, chạy lệnh sau để cấu hình thông tin tài khoản:\naws configure Nhập các thông tin:\n AWS Access Key ID: từ IAM user AWS Secret Access Key: từ IAM user Default region name: ap-northeast-1 (hoặc vùng bạn sử dụng) Default output format: json   📦 3. Tạo ECR Repository Trên AWS Console  Truy cập: https://console.aws.amazon.com/ecr Chọn Repositories → Create repository Nhập tên repository: webenglish Chọn Private, giữ thiết lập mặc định Nhấn Create repository  Bạn sẽ nhận được URI như sau:\n466322313916.dkr.ecr.ap-northeast-1.amazonaws.com/webenglish\r 🏗 4. Xây Dựng Docker Image Ứng Dụng Di chuyển đến thư mục có Dockerfile và build image:\ndocker build -t webenglish-app .  🔐 5. Đăng Nhập Vào Amazon ECR Trước khi push, bạn cần đăng nhập vào ECR:\naws ecr get-login-password --region ap-northeast-1 | \\ docker login --username AWS \\ --password-stdin 466322313916.dkr.ecr.ap-northeast-1.amazonaws.com  🏷 6. Tag Docker Image Với ECR URI docker tag webenglish-app:latest \\ 466322313916.dkr.ecr.ap-northeast-1.amazonaws.com/webenglish:webenglish-app  🚀 7. Push Docker Image Lên ECR docker push \\ 466322313916.dkr.ecr.ap-northeast-1.amazonaws.com/webenglish:webenglish-app  🐬 8. Đẩy Image MySQL 8.0 Lên ECR (Tuỳ chọn) Nếu bạn đã pull/build image MySQL 8.0 và image ID là 7d4e34ccfad4, bạn có thể tag và push như sau:\n✅ Gắn tag MySQL image docker tag 7d4e34ccfad4 \\ 466322313916.dkr.ecr.ap-northeast-1.amazonaws.com/webenglish:mysql-8.0 📌 Lưu ý: Bạn có thể thay mysql-8.0 bằng latest nếu muốn.\n✅ Push MySQL image lên ECR docker push \\ 466322313916.dkr.ecr.ap-northeast-1.amazonaws.com/webenglish:mysql-8.0 ⏳ Kích thước image MySQL khoảng 772MB — quá trình push có thể mất vài phút.\n 📋 9. Kiểm Tra Trên AWS Console Sau khi push xong:\n Truy cập lại AWS Console → ECR Vào repository webenglish Xác minh đã có các image với tag: webenglish-app, mysql-8.0, v.v.   📝 10. Lưu Ý Bổ Sung  Docker cần được cài đặt và chạy: sudo systemctl start docker  Tài khoản IAM phải có quyền:  AmazonEC2ContainerRegistryFullAccess   Bạn có thể sử dụng image từ ECR để triển khai container trên:  EC2 ECS EKS     📚 11. Tài Liệu Tham Khảo  AWS CLI Install Guide Amazon ECR Documentation Docker CLI Docs   "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/3-monitoring/","title":"Triển khai Giám sát Hệ thống","tags":[],"description":"","content":"Hướng Dẫn Thiết Lập Hệ Thống Giám Sát Hạ Tầng WebEnglish trên AWS Linux 2 1. Mục tiêu  Giám sát hiệu suất EC2 (CPU, RAM, Disk). Thu thập log của Spring Boot và MySQL. Gửi cảnh báo qua SNS. Hiển thị dashboard trực quan trên CloudWatch.  Công cụ sử dụng: AWS CloudWatch, CloudWatch Agent, Amazon SNS.\n 2. Yêu cầu chuẩn bị EC2 Instance  Amazon Linux 2 Đã cài đặt: Docker, Docker Compose, Java, MySQL (trong container hoặc cài trực tiếp)  Quyền IAM Role cần có Gán IAM role cho EC2 instance với quyền:\n CloudWatchAgentServerPolicy AmazonSSMManagedInstanceCore Quyền ghi logs và metrics vào CloudWatch  Kiểm tra role đã gán:\ncurl http://169.254.169.254/latest/meta-data/iam/security-credentials/ Cài đặt AWS CLI (nếu chưa có) sudo yum install unzip -y curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install aws --version Cấu hình CLI (thay thông tin bằng tài khoản/region của bạn):\naws configure  3. Cài đặt \u0026amp; cấu hình CloudWatch Agent Bước 1: Cài đặt Agent cd /tmp curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm sudo rpm -U ./amazon-cloudwatch-agent.rpm Bước 2: Tạo file cấu hình sudo nano /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json Dán nội dung sau:\n{ \u0026#34;agent\u0026#34;: { \u0026#34;metrics_collection_interval\u0026#34;: 60, \u0026#34;logfile\u0026#34;: \u0026#34;/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\u0026#34;, \u0026#34;run_as_user\u0026#34;: \u0026#34;root\u0026#34; }, \u0026#34;metrics\u0026#34;: { \u0026#34;namespace\u0026#34;: \u0026#34;WebEnglishMetrics\u0026#34;, \u0026#34;append_dimensions\u0026#34;: { \u0026#34;InstanceId\u0026#34;: \u0026#34;${aws:InstanceId}\u0026#34;, \u0026#34;InstanceType\u0026#34;: \u0026#34;${aws:InstanceType}\u0026#34;, \u0026#34;AutoScalingGroupName\u0026#34;: \u0026#34;${aws:AutoScalingGroupName}\u0026#34; }, \u0026#34;aggregation_dimensions\u0026#34;: [[\u0026#34;InstanceId\u0026#34;]], \u0026#34;metrics_collected\u0026#34;: { \u0026#34;cpu\u0026#34;: { \u0026#34;measurement\u0026#34;: [ \u0026#34;cpu_usage_user\u0026#34;, \u0026#34;cpu_usage_system\u0026#34;, \u0026#34;cpu_usage_idle\u0026#34; ], \u0026#34;metrics_collection_interval\u0026#34;: 60, \u0026#34;totalcpu\u0026#34;: true }, \u0026#34;mem\u0026#34;: { \u0026#34;measurement\u0026#34;: [\u0026#34;mem_used_percent\u0026#34;], \u0026#34;metrics_collection_interval\u0026#34;: 60 }, \u0026#34;disk\u0026#34;: { \u0026#34;measurement\u0026#34;: [\u0026#34;used_percent\u0026#34;], \u0026#34;metrics_collection_interval\u0026#34;: 60, \u0026#34;resources\u0026#34;: [\u0026#34;*\u0026#34;] }, \u0026#34;diskio\u0026#34;: { \u0026#34;measurement\u0026#34;: [\u0026#34;io_time\u0026#34;], \u0026#34;metrics_collection_interval\u0026#34;: 60 }, \u0026#34;swap\u0026#34;: { \u0026#34;measurement\u0026#34;: [\u0026#34;swap_used_percent\u0026#34;], \u0026#34;metrics_collection_interval\u0026#34;: 60 } } } } Bước 3: Khởi động Agent sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \\  -a fetch-config \\  -m ec2 \\  -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \\  -s Bước 4: Kiểm tra trạng thái Agent sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a status  4. Tạo cảnh báo với SNS Bước 1: Tạo Topic \u0026amp; đăng ký email aws sns create-topic \\  --name WebEnglishAlerts \\  --region ap-northeast-1 Sao chép TopicArn từ kết quả lệnh trên.\naws sns subscribe \\  --topic-arn arn:aws:sns:ap-northeast-1:ACCOUNT_ID:WebEnglishAlerts \\  --protocol email \\  --notification-endpoint YOUR_EMAIL@example.com \\  --region ap-northeast-1 📧 Xác nhận đăng ký qua email trước khi tiếp tục.  Bước 2: Tạo cảnh báo CPU aws cloudwatch put-metric-alarm \\  --alarm-name HighCPUUsage \\  --metric-name cpu_usage_user \\  --namespace WebEnglishMetrics \\  --statistic Average \\  --period 300 \\  --threshold 80 \\  --comparison-operator GreaterThanThreshold \\  --evaluation-periods 1 \\  --alarm-actions arn:aws:sns:ap-northeast-1:ACCOUNT_ID:WebEnglishAlerts \\  --region ap-northeast-1  Bạn cũng có thể gửi thử dữ liệu giả lên CloudWatch để kiểm tra:\naws cloudwatch put-metric-data \\  --metric-name cpu_usage_active \\  --namespace WebEnglishMetrics \\  --value 90 \r---\r"},{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/2-prerequiste/2.1.3-createprivatesubnet/","title":"Triển Khai Dự Án AWS CDK Kết Nối ECS, EC2, IAM","tags":[],"description":"","content":"🚀 Hướng Dẫn Triển Khai Ứng Dụng Trên AWS Bằng AWS CDK Tài liệu này hướng dẫn cách thiết lập và triển khai một ứng dụng Spring Boot sử dụng AWS CDK với các dịch vụ liên quan: ECS, EC2 (VPC), IAM và CloudWatch Logs. Dự án sử dụng AWS Fargate để chạy container mà không cần quản lý server.\n ✅ 1. Cài Đặt Môi Trường AWS CDK Trên Ubuntu 🔹 Gỡ bỏ Node.js/NPM cũ (nếu có) sudo yum remove -y nodejs npm sudo yum autoremove -y 🔹 Cài đặt NVM và Node.js (Phiên bản ổn định) curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash export NVM_DIR=\u0026#34;$HOME/.nvm\u0026#34; source \u0026#34;$NVM_DIR/nvm.sh\u0026#34; nvm install 22.9.0 nvm use 22.9.0 🔹 Cài đặt AWS CDK npm install -g aws-cdk Kiểm tra phiên bản:\ncdk --version  ✅ 2. Khởi Tạo Dự Án CDK TypeScript mkdir test-cdk \u0026amp;\u0026amp; cd test-cdk cdk init app --language typescript 🔹 Cài thêm các thư viện AWS cần thiết npm install @aws-cdk/aws-ecs @aws-cdk/aws-ec2 @aws-cdk/aws-ecs-patterns @aws-cdk/aws-rds  ✅ 3. Tạo Stack CDK (lib/webenglish-cdk-stack.ts) Tạo file lib/webenglish-cdk-stack.ts với nội dung:\nimport * as cdk from \u0026#39;aws-cdk-lib\u0026#39;; import * as ec2 from \u0026#39;aws-cdk-lib/aws-ec2\u0026#39;; import * as ecs from \u0026#39;aws-cdk-lib/aws-ecs\u0026#39;; import * as iam from \u0026#39;aws-cdk-lib/aws-iam\u0026#39;; import * as logs from \u0026#39;aws-cdk-lib/aws-logs\u0026#39;; import { Construct } from \u0026#39;constructs\u0026#39;; export class TestCdkStack extends cdk.Stack { constructor(scope: Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); // VPC  const vpc = new ec2.Vpc(this, \u0026#39;MyVpc\u0026#39;, { maxAzs: 2, subnetConfiguration: [ { subnetType: ec2.SubnetType.PUBLIC, name: \u0026#39;Public\u0026#39; }, { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS, name: \u0026#39;Private\u0026#39; }, ], }); // ECS Cluster  const cluster = new ecs.Cluster(this, \u0026#39;MyCluster\u0026#39;, { vpc }); // IAM Execution Role (existing role)  const executionRole = iam.Role.fromRoleArn( this, \u0026#39;EcsExecutionRole\u0026#39;, \u0026#39;arn:aws:iam::466322313916:role/WebenglishEcsExecutionRole\u0026#39; ); // Log Group  const logGroup = new logs.LogGroup(this, \u0026#39;WebenglishLogGroup\u0026#39;, { retention: logs.RetentionDays.ONE_WEEK, }); // Fargate Task Definition  const taskDefinition = new ecs.FargateTaskDefinition(this, \u0026#39;TaskDef\u0026#39;, { memoryLimitMiB: 2048, cpu: 1024, executionRole, }); // MySQL Container  const mysqlContainer = taskDefinition.addContainer(\u0026#39;MySQLContainer\u0026#39;, { image: ecs.ContainerImage.fromRegistry( \u0026#39;466322313916.dkr.ecr.ap-northeast-1.amazonaws.com/webenglish:mysql-8.0\u0026#39; ), environment: { MYSQL_ROOT_PASSWORD: \u0026#39;123456\u0026#39;, MYSQL_DATABASE: \u0026#39;webenglish\u0026#39;, }, logging: ecs.LogDriver.awsLogs({ logGroup, streamPrefix: \u0026#39;mysql\u0026#39;, }), portMappings: [{ containerPort: 3306 }], essential: true, healthCheck: { command: [\u0026#39;CMD\u0026#39;, \u0026#39;mysqladmin\u0026#39;, \u0026#39;ping\u0026#39;, \u0026#39;-h\u0026#39;, \u0026#39;localhost\u0026#39;], interval: cdk.Duration.seconds(10), timeout: cdk.Duration.seconds(5), retries: 5, startPeriod: cdk.Duration.seconds(20), }, }); // App Container (Spring Boot)  const appContainer = taskDefinition.addContainer(\u0026#39;WebenglishApp\u0026#39;, { image: ecs.ContainerImage.fromRegistry( \u0026#39;466322313916.dkr.ecr.ap-northeast-1.amazonaws.com/webenglish:webenglish-app\u0026#39; ), logging: ecs.LogDriver.awsLogs({ logGroup, streamPrefix: \u0026#39;webenglish-app\u0026#39;, }), portMappings: [{ containerPort: 8080 }], environment: { SPRING_DATASOURCE_URL: \u0026#39;jdbc:mysql://localhost:3306/webenglish\u0026#39;, SPRING_DATASOURCE_USERNAME: \u0026#39;root\u0026#39;, SPRING_DATASOURCE_PASSWORD: \u0026#39;123456\u0026#39;, }, }); // Container Dependency: app waits for MySQL to be healthy  appContainer.addContainerDependencies({ container: mysqlContainer, condition: ecs.ContainerDependencyCondition.HEALTHY, }); // Fargate Service  new ecs.FargateService(this, \u0026#39;WebenglishService\u0026#39;, { cluster, taskDefinition, desiredCount: 1, assignPublicIp: true, }); } }  ✅ 4. Cấu Hình AWS CLI 🔹 Đăng nhập AWS aws configure Nhập:\n AWS Access Key ID AWS Secret Access Key Region: ap-northeast-1   ✅ 5. Tạo IAM Role Cho ECS Task Trên AWS Console:  Vào IAM \u0026gt; Roles Tạo role WebenglishEcsExecutionRole Gán chính sách:  AmazonECSTaskExecutionRolePolicy   Ghi lại ARN của role:\nVí dụ:\narn:aws:iam::466322313916:role/WebenglishEcsExecutionRole   ✅ 6. Bootstrap CDK \u0026amp; Deploy cdk bootstrap aws://466322313916/ap-northeast-1 cdk synth cdk deploy  📌 Ghi Chú Bổ Sung  Bạn cần phải tạo ECR và đẩy image webenglish:webenglish-app lên trước đó. Nếu dùng database RDS thực sự, cần tạo một RDS instance và cập nhật SPRING_DATASOURCE_URL.   🧠 Mở Rộng Sau Này  Tích hợp Load Balancer (ALB) bằng ApplicationLoadBalancedFargateService Kết nối RDS thông qua Security Group và Secrets Manager Tích hợp CI/CD: GitHub Actions hoặc AWS CodePipeline   🧾 Tài Liệu Tham Khảo  https://docs.aws.amazon.com/cdk/ https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html  "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/4-anomaly-detection/","title":"Triển khai Tính năng Cảnh Báo và Phản Hồi Tự Động cho WebEnglish","tags":[],"description":"","content":" 🚨 Triển khai Cảnh Báo và Phản Hồi Tự Động với CloudWatch, SNS và Lambda Tài liệu này hướng dẫn chi tiết cách tích hợp Amazon CloudWatch, SNS, Lambda, và (tuỳ chọn) DevOps Guru để phát hiện bất thường và tự động phản ứng trong hệ thống WebEnglish.\n 🎯 Mục Tiêu  Phát hiện bất thường hiệu suất của EC2 hoặc ECS. Gửi cảnh báo qua email và kích hoạt Lambda để phản ứng. Tự động điều chỉnh số lượng task của dịch vụ ECS hoặc khởi động lại.   ✅ 1. Tạo CloudWatch Anomaly Detector Tạo trình phát hiện bất thường cho chỉ số cpu_usage_active trong namespace WebEnglishMetrics.\naws cloudwatch put-anomaly-detector \\ --namespace \u0026#34;WebEnglishMetrics\u0026#34; \\ --metric-name \u0026#34;cpu_usage_active\u0026#34; \\ --stat \u0026#34;Average\u0026#34; \\ --dimensions Name=InstanceId,Value=i-0817b4fd50252b509 \\ --region ap-northeast-1  ✅ 2. Tạo SNS Topic và Đăng ký Email Tạo một SNS topic để gửi cảnh báo và đăng ký một email để nhận thông báo.\naws sns create-topic --name WebEnglishAlerts --region ap-northeast-1 aws sns subscribe \\ --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --protocol email \\ --notification-endpoint your-email@example.com \\ --region ap-northeast-1  📩 Đừng quên xác nhận email trong hộp thư đến để kích hoạt subscription.   ✅ 3. Tạo CloudWatch Alarm từ Anomaly Detector Tạo một cảnh báo để kích hoạt khi chỉ số cpu_usage_active vượt quá ngưỡng bất thường.\naws cloudwatch put-metric-alarm \\ --alarm-name CPUAnomalyAlarm \\ --evaluation-periods 2 \\ --datapoints-to-alarm 2 \\ --treat-missing-data notBreaching \\ --comparison-operator GreaterThanUpperThreshold \\ --metrics \u0026#39;[ { \u0026#34;Id\u0026#34;: \u0026#34;m1\u0026#34;, \u0026#34;MetricStat\u0026#34;: { \u0026#34;Metric\u0026#34;: { \u0026#34;Namespace\u0026#34;: \u0026#34;WebEnglishMetrics\u0026#34;, \u0026#34;MetricName\u0026#34;: \u0026#34;cpu_usage_active\u0026#34;, \u0026#34;Dimensions\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;InstanceId\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;i-0817b4fd50252b509\u0026#34; } ] }, \u0026#34;Period\u0026#34;: 60, \u0026#34;Stat\u0026#34;: \u0026#34;Average\u0026#34; }, \u0026#34;ReturnData\u0026#34;: true }, { \u0026#34;Id\u0026#34;: \u0026#34;ad1\u0026#34;, \u0026#34;Expression\u0026#34;: \u0026#34;ANOMALY_DETECTION_BAND(m1, 2)\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;AnomalyDetectionBand\u0026#34;, \u0026#34;ReturnData\u0026#34;: true } ]\u0026#39; \\ --threshold-metric-id ad1 \\ --alarm-actions arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --region ap-northeast-1  ✅ 4. Tạo Lambda để Scale ECS A. Tạo IAM Role Tạo IAM role LambdaScaleECSRole với chính sách tin cậy cho Lambda.\naws iam create-role \\ --role-name LambdaScaleECSRole \\ --assume-role-policy-document file://trust-policy.json Nội dung file trust-policy.json:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;lambda.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; } ] } B. Gắn Policy cần thiết Gắn các chính sách cần thiết để Lambda có thể ghi log và tương tác với ECS.\naws iam attach-role-policy \\ --role-name LambdaScaleECSRole \\ --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole aws iam attach-role-policy \\ --role-name LambdaScaleECSRole \\ --policy-arn arn:aws:iam::aws:policy/AmazonECS_FullAccess  ✅ 5. Tạo Hàm Lambda scale_ecs_service.py Hàm Python này sẽ gọi API của AWS để điều chỉnh số lượng task mong muốn của dịch vụ ECS.\nimport boto3 def lambda_handler(event, context): ecs = boto3.client(\u0026#39;ecs\u0026#39;) cluster = \u0026#39;MyCluster\u0026#39; service = \u0026#39;WebenglishService\u0026#39; desired_count = 2 try: response = ecs.update_service( cluster=cluster, service=service, desiredCount=desired_count ) print(\u0026#34;Service updated:\u0026#34;, response[\u0026#39;service\u0026#39;][\u0026#39;serviceName\u0026#39;]) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: \u0026#39;Scaling executed\u0026#39; } except Exception as e: print(\u0026#34;Error:\u0026#34;, str(e)) return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;body\u0026#39;: str(e) } Nén file:\nzip function.zip scale_ecs_service.py  ✅ 6. Tạo Lambda Function Tạo hàm Lambda có tên ScaleWebEnglish từ file nén vừa tạo.\naws lambda create-function \\ --function-name ScaleWebEnglish \\ --runtime python3.9 \\ --role arn:aws:iam::\u0026lt;ACCOUNT_ID\u0026gt;:role/LambdaScaleECSRole \\ --handler scale_ecs_service.lambda_handler \\ --zip-file fileb://function.zip \\ --timeout 10 \\ --region ap-northeast-1  ✅ 7. Gắn Lambda vào SNS và Cấp Quyền Đăng ký Lambda vào SNS topic để nó có thể được kích hoạt khi có cảnh báo.\naws sns subscribe \\ --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --protocol lambda \\ --notification-endpoint arn:aws:lambda:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:function:ScaleWebEnglish \\ --region ap-northeast-1 Cấp quyền cho SNS gọi Lambda:\naws lambda add-permission \\ --function-name ScaleWebEnglish \\ --statement-id snsInvokePermission \\ --action lambda:InvokeFunction \\ --principal sns.amazonaws.com \\ --source-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --region ap-northeast-1  ✅ 8. (Tùy chọn) Tạo Step Function cho Scale ECS Sử dụng Step Functions để tạo luồng công việc tự động.\nFile scale-ecs-step.json { \u0026#34;Comment\u0026#34;: \u0026#34;Scale ECS when high CPU\u0026#34;, \u0026#34;StartAt\u0026#34;: \u0026#34;ScaleService\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;ScaleService\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:states:::aws-sdk:ecs:updateService\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;Cluster\u0026#34;: \u0026#34;MyCluster\u0026#34;, \u0026#34;Service\u0026#34;: \u0026#34;WebenglishService\u0026#34;, \u0026#34;DesiredCount\u0026#34;: 2 }, \u0026#34;End\u0026#34;: true } } } Tạo role cho Step Function aws iam create-role \\ --role-name StepFunctionExecutionRole \\ --assume-role-policy-document file://stepfunction-trust-policy.json aws iam attach-role-policy \\ --role-name StepFunctionExecutionRole \\ --policy-arn arn:aws:iam::aws:policy/AmazonECS_FullAccess Tạo State Machine aws stepfunctions create-state-machine \\ --name ScaleWebEnglishStepFunction \\ --definition file://scale-ecs-step.json \\ --role-arn arn:aws:iam::\u0026lt;ACCOUNT_ID\u0026gt;:role/StepFunctionExecutionRole \\ --type STANDARD \\ --region ap-northeast-1  ✅ 9. Kiểm Thử Hệ Thống    Mục tiêu Cách kiểm thử     Tăng CPU stress-ng hoặc endpoint Spring Boot   Log Lambda CloudWatch Logs → /aws/lambda/ScaleWebEnglish   Scale ECS Console → WebenglishService   Hoạt động SNS Gửi thử message bằng CLI    🔹 Tăng CPU (Ubuntu): sudo apt update \u0026amp;\u0026amp; sudo apt install stress-ng -y stress-ng --cpu 2 --timeout 300s 🔹 Hoặc endpoint Spring Boot: @GetMapping(\u0026#34;/load-cpu\u0026#34;) public String loadCpu() { while (true) { Math.pow(Math.random(), Math.random()); } } Gọi endpoint:\ncurl http://your-ecs-app/load-cpu 🔹 Test SNS → Lambda: aws sns publish \\ --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --message \u0026#39;{\u0026#34;test\u0026#34;: \u0026#34;SNS to Lambda\u0026#34;}\u0026#39; \\ --region ap-northeast-1  ✅ 10. Mẹo Debug \u0026amp; Tối Ưu    Thành phần Lưu ý     Lambda Thêm xử lý exception rõ ràng và log chi tiết.   IAM Role Chỉ cấp quyền tối thiểu cần thiết để tuân thủ nguyên tắc Least Privilege.   ECS Cân nhắc sử dụng chính sách Target Tracking Policy thay vì điều chỉnh thủ công trong Lambda.   Alarm Điều chỉnh evaluation-periods hợp lý để tránh cảnh báo giả.    📌 Test thủ công Lambda nếu cần:\naws lambda invoke \\ --function-name ScaleWebEnglish \\ --payload \u0026#39;{}\u0026#39; \\ output.json \\ --region ap-northeast-1 "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/5-automated-response/","title":"Automated Response","tags":[],"description":"","content":"  🚨 Deploying a Professional Alerting \u0026amp; Incident Escalation System  Objective: A multi-level alerting system that automatically detects anomalies, sends notifications to the right people, and responds automatically if required.\n  📌 1. Designing a 3-Level Alert Workflow    Level Name Recipient Response Time Tool     1 Technical Alert (DevOps) DevOps Team ≤ 15 minutes Email / SNS   2 Urgent Alert (On-call) On-call Dev ≤ 5 minutes SNS + Lambda   3 Manager Alert Senior Manager During office hours Email / SMS     🧪 2. Create SNS Topics and Subscriptions 2.1 Create SNS Topics aws sns create-topic --name WebEnglishAlert-Level1 aws sns create-topic --name WebEnglishAlert-Level2 aws sns create-topic --name WebEnglishAlert-Level3 2.2 Subscribe Emails to Topics (must confirm) aws sns subscribe \\  --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlert-Level1 \\  --protocol email \\  --notification-endpoint devops@example.com aws sns subscribe \\  --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlert-Level3 \\  --protocol email \\  --notification-endpoint ceo@example.com  ✅ Check your email to confirm the subscription.   📈 3. Create CloudWatch Alarm - Level 1 aws cloudwatch put-metric-alarm \\  --alarm-name CPU-High-Level1 \\  --alarm-description \u0026#34;High CPU Alert - Level 1\u0026#34; \\  --metric-name cpu_usage_active \\  --namespace WebEnglishMetrics \\  --statistic Average \\  --period 300 \\  --evaluation-periods 1 \\  --threshold 80 \\  --comparison-operator GreaterThanThreshold \\  --actions-enabled \\  --alarm-actions arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlert-Level1  🛠 4. Escalation Lambda 4.1 Create IAM Role for Lambda trust-policy.json\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [{ \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;lambda.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; }] } aws iam create-role \\  --role-name LambdaAlertEscalatorRole \\  --assume-role-policy-document file://trust-policy.json aws iam attach-role-policy \\  --role-name LambdaAlertEscalatorRole \\  --policy-arn arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess aws iam attach-role-policy \\  --role-name LambdaAlertEscalatorRole \\  --policy-arn arn:aws:iam::aws:policy/AmazonSNSFullAccess  4.2 Lambda Code: alert_escalator.py import boto3 def lambda_handler(event, context): cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) sns = boto3.client(\u0026#39;sns\u0026#39;) alarm_name = \u0026#34;CPU-High-Level1\u0026#34; response = cloudwatch.describe_alarms(AlarmNames=[alarm_name]) if response[\u0026#39;MetricAlarms\u0026#39;] and response[\u0026#39;MetricAlarms\u0026#39;][0][\u0026#39;StateValue\u0026#39;] == \u0026#34;ALARM\u0026#34;: sns.publish( TopicArn=\u0026#34;arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlert-Level2\u0026#34;, Subject=\u0026#34;🚨 Escalation Alert\u0026#34;, Message=f\u0026#34;Alarm {alarm_name}has not been handled. Escalating to Level 2.\u0026#34; )  4.3 Deploy Lambda Function zip function.zip alert_escalator.py aws lambda create-function \\  --function-name alertEscalator \\  --runtime python3.12 \\  --role arn:aws:iam::\u0026lt;ACCOUNT_ID\u0026gt;:role/LambdaAlertEscalatorRole \\  --handler alert_escalator.lambda_handler \\  --zip-file fileb://function.zip \\  --timeout 10  ✅ You can test it in AWS Console → Lambda → Test   📈 5. Create Alarm Triggering Lambda - Level 2 aws cloudwatch put-metric-alarm \\  --alarm-name CPU-High-Level2 \\  --alarm-description \u0026#34;CPU high alert escalation\u0026#34; \\  --metric-name cpu_usage_active \\  --namespace WebEnglishMetrics \\  --statistic Average \\  --period 600 \\  --evaluation-periods 2 \\  --threshold 80 \\  --comparison-operator GreaterThanThreshold \\  --actions-enabled \\  --alarm-actions arn:aws:lambda:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:function:alertEscalator  🔁 Escalation Overview    Level Alarm Condition Action     1 CPU-High-Level1 1 × 5 min \u0026gt; 80% Send SNS Level 1 → DevOps   2 CPU-High-Level2 2 × 10 min \u0026gt; 80% Call Lambda → send SNS Level 2 (notify on-call Dev)   3 (optional) No response in 30m Send SNS Level 3 → senior management via email/SMS     📊 6. CloudWatch Anomaly Detection (Advanced Option) aws cloudwatch put-anomaly-detector \\  --namespace WebEnglishMetrics \\  --metric-name cpu_usage_active \\  --statistic Average \\  --dimensions Name=InstanceId,Value=i-xxxxxx  🌀 7. Step Functions (Optional Automated Response) Use to:\n Scale ECS Service Reboot EC2 Instance Trigger a sequence of actions when an incident is detected   🧪 8. System Testing sudo yum install -y stress-ng stress-ng --cpu 4 --timeout 600s You can also push fake metrics to CloudWatch for testing:\naws cloudwatch put-metric-data \\  --metric-name cpu_usage_active \\  --namespace WebEnglishMetrics \\  --value 90 Check:\n Is SNS sending to the correct recipients? Was Lambda triggered? Was escalation executed? Were email confirmations completed?   📘 9. Summary ✅ Multi-level alerting system works as expected:\n CloudWatch monitors \u0026amp; detects anomalies SNS routes alerts to the correct recipients Lambda responds if alerts are not handled Extendable with Step Functions, PagerDuty, EC2 auto recovery\u0026hellip;    🧩 Advanced Suggestions  Use CloudFormation / CDK to define the entire infrastructure as code Log into CloudWatch Logs for escalation tracking Create a Dead Letter Queue for Lambda in case of failures  \r---\rNếu bạn muốn, mình có thể **đưa toàn bộ bản tiếng Anh này thành file `.md`** để bạn thêm trực tiếp vào hệ thống Hugo hoặc GitBook. Bạn có muốn mình tạo file đó luôn không?\r"},{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/7-dashboard/","title":"Dashboard Development","tags":[],"description":"","content":"📊 Triển Khai Dashboard và Báo Cáo Trực Quan Cho Dự Án WebEnglish Tài liệu này cung cấp quy trình chuyên nghiệp và chi tiết để thiết lập các bảng điều khiển (dashboards) và báo cáo giám sát dữ liệu hệ thống trong dự án WebEnglish. Việc giám sát được thực hiện bằng Amazon CloudWatch và Amazon QuickSight để cung cấp khả năng hiển thị thời gian thực cũng như các phân tích chiến lược giúp đội DevOps phản ứng nhanh chóng với sự cố sản phẩm.\n 🎯 Mục Tiêu  Hiển thị hiệu suất hệ thống EC2, container, ứng dụng Spring Boot, và MySQL. Cảnh báo khi có dấu hiệu bất thường dựa trên hành vi (anomaly). Cung cấp báo cáo trực quan định kỳ cho DevOps và quản lý cấp cao.   🧭 Bước 1: Truy cập CloudWatch Dashboard  Vào AWS Console → Tìm “CloudWatch”. Vào Dashboards → Chọn hoặc tạo dashboard mới.   📊 Bước 2: Thêm metric biểu đồ  Click “Add widget” → Chọn Line → Click Next. Trong phần “Browse” chọn:  Region: Tokyo (hoặc nơi instance đang chạy) Namespace: WebEnglishMetrics (theo bạn cấu hình) Metric: cpu_usage_active     📈 Bước 3: Thêm Anomaly Detection Band  Trong phần Graphed metrics, click “Add math” → chọn ANOMALY_DETECTION_BAND(m1, 2)  m1 là ID metric gốc. 2 là độ nhạy (sensitivity).     🚨 Bước 4: Tạo Alarm từ metric  Vào tab Actions → Click “Create Alarm” Chọn metric cpu_usage_active Chọn kiểu thống kê: Average Period: 5 minutes Conditions:  Threshold type: Anomaly detection Anomaly detection model: chọn dòng ANOMALY_DETECTION_BAND(m1, 2)     ⚙️ Bước 5: Additional configuration    Tùy chọn Gợi ý cấu hình     Datapoints to alarm 3 out of 5   Missing data treatment Treat missing data as missing   Actions suppression Bỏ qua nếu không dùng rule khác    🏁 Bước 6: Đặt tên \u0026amp; tạo Alarm  Đặt tên báo động: ví dụ HighCPUWithAnomalyDetection Chọn SNS topic nếu muốn gửi email Click Create Alarm   🧾 Mẹo Vận Hành  ⏱️ Giới hạn thời gian giữ logs: 7–14 ngày để giảm chi phí. 🔔 Cấu hình gửi cảnh báo qua SNS Topic tới email hoặc Lambda handler. 🧪 Kết hợp với AWS DevOps Guru để tự động phát hiện root cause.   📚 Tài Liệu Tham Khảo  CloudWatch Dashboards Amazon QuickSight Getting Started Anomaly Detection  "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/8-operations/","title":"Operational Procedures","tags":[],"description":"","content":"✅ Quy trình Vận hành \u0026amp; Tối ưu hóa (Operational Procedures \u0026amp; Optimization) 🔹 1. Thiết lập Runbook chuyên sâu Runbook là tài liệu hướng dẫn chi tiết từng bước xử lý cho các kịch bản sự cố phổ biến, bao gồm:\n   Kịch bản sự cố Dấu hiệu nhận biết Nguyên nhân phổ biến Bước xử lý chi tiết Người chịu trách nhiệm     CPU sử dụng 100% Alarm CloudWatch “HighCPUUsage” Load đột biến từ người dùng 1. Xác minh log ứng dụng 2. Kiểm tra container ECS đang chạy 3. Scale ECS service thêm 1 task DevOps Engineer   Ứng dụng không phản hồi Timeout từ client, alarm “TargetResponseTimeHigh” ECS service quá tải hoặc lỗi code 1. Kiểm tra log ứng dụng 2. Scale service thủ công nếu cần 3. Thiết lập auto scaling alarm DevOps Engineer     📁 Vị trí lưu trữ đề xuất: /runbook/webenglish/ecs-cpu-spike.md\n  🔹 2. Tích hợp AWS DevOps Guru 🧠 Giới thiệu AWS DevOps Guru là dịch vụ sử dụng AI để phát hiện bất thường và đề xuất khắc phục cho hệ thống.\n🎯 Lợi ích chính  Tự động phát hiện sự cố mà không cần cấu hình rule thủ công Phân tích log, metrics, trace Gợi ý nguyên nhân và hành động khắc phục Tích hợp SNS để gửi cảnh báo Hiển thị trực quan qua bản đồ lỗi (Anomaly Map)   🔹 3. Bật DevOps Guru cho hệ thống 🔧 Các bước triển khai  Truy cập AWS Console \u0026gt; DevOps Guru Chọn Enable DevOps Guru Lựa chọn phạm vi:  Analyze all AWS resources (theo dõi toàn bộ tài nguyên) Hoặc chọn CloudFormation Stack cụ thể   Cấu hình SNS Topic để nhận cảnh báo (tạo mới nếu chưa có) Click Enable   ⏳ DevOps Guru sẽ bắt đầu thu thập dữ liệu và cung cấp insight sau vài phút đến vài giờ.   🔹 4. Theo dõi \u0026amp; Nhận cảnh báo 🧾 Nội dung Insight bao gồm:  Tên tài nguyên bị ảnh hưởng (ECS, RDS, Lambda…) Thời điểm xảy ra lỗi Metrics bất thường Đề xuất root cause Gợi ý hành động khắc phục  📩 Thiết lập SNS để nhận cảnh báo  Tạo SNS Topic: devops-guru-alerts Thêm subscriber: email, Lambda, webhook…   🔹 5. Kết hợp các dịch vụ để tối ưu hóa    Công cụ Mục đích sử dụng     DevOps Guru Phát hiện và phân tích sự cố tự động   SNS Gửi cảnh báo đến email, Slack, Lambda\u0026hellip;   CloudWatch Thu thập metrics, log, vẽ biểu đồ giám sát   Notebook Truy vấn và phân tích tuỳ chỉnh nâng cao     📌 Gợi ý nâng cao  Triển khai DevOps Guru để giảm thời gian điều tra lỗi Kết hợp Amazon QuickSight + SNS để gửi báo cáo định kỳ Tự động hóa xử lý lỗi bằng AWS Lambda hoặc Systems Manager   📚 Tài liệu tham khảo  🔗 AWS CloudWatch Log Insights 🔗 Auto Scaling ECS 🔗 AWS DevOps Guru 🔗 AWS Runbook Template  "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/11-cleanup/","title":"Clean up","tags":[],"description":"","content":"Chúng ta sẽ tiến hành dọn dẹp toàn bộ tài nguyên AWS đã tạo trong quá trình thực hành. Hãy thực hiện theo các bước sau để tránh phát sinh chi phí.\n ✅ Xóa DevOps Guru  Truy cập DevOps Guru Console Ở menu trái, chọn Settings. Tại mục CloudFormation stacks, click Delete đối với stack DevOps Guru đã kích hoạt. Xác nhận xóa nếu được yêu cầu.   ✅ Xóa CDK Stack bằng cdk destroy  Mở terminal tại thư mục chứa project CDK. Chạy lệnh sau để xóa toàn bộ stack CDK: cdk destroy  Khi được hỏi xác nhận, nhập y và nhấn Enter. Chờ quá trình hủy stack hoàn tất.    ✅ Xóa S3 Bucket  Truy cập S3 Console Click chọn các bucket bạn đã tạo (VD: cdk-bucket-*, log-bucket-*, …). Thực hiện lần lượt các bước:  Click Empty → Gõ permanently delete → Click Empty. Sau đó, click Delete → Gõ tên bucket → Click Delete bucket.     ✅ Xóa CloudFormation Stack (nếu không dùng CDK)  Truy cập CloudFormation Console Chọn các stack liên quan đến bài lab (VD: DevOpsGuruStack, CDKStack, …). Click Delete và xác nhận xóa stack.   ✅ Xóa CloudWatch Logs / Alarms / Dashboards  Truy cập CloudWatch Console  Xóa Log Groups:\n Vào Logs \u0026gt; Log groups Chọn các log group (VD: /aws/lambda/..., /aws/events/...) Click Actions \u0026gt; Delete log groups  Xóa Alarms:\n Vào Alarms \u0026gt; All alarms Chọn tất cả alarms → Click Actions \u0026gt; Delete  Xóa Dashboards:\n Vào Dashboards Chọn dashboard → Click Actions \u0026gt; Delete    ✅ Xóa EC2 Instances  Truy cập EC2 Console Vào Instances Chọn các instance cần xóa → Click Instance state \u0026gt; Terminate instance Xác nhận Terminate    ✅ Xóa VPC  Truy cập VPC Console Vào Your VPCs Chọn VPC bạn đã tạo → Click Actions \u0026gt; Delete VPC Xác nhận xóa   ✅ Xóa Subnet (nếu không tự động xóa cùng VPC)  Trong VPC Console → Vào mục Subnets Chọn các subnet (Public, Private) liên quan → Click Actions \u0026gt; Delete subnet    ✅ Lưu ý: Sau khi hoàn tất dọn dẹp, bạn có thể vào Billing Dashboard để kiểm tra chi phí và đảm bảo không có tài nguyên nào còn tồn tại.\n  "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://phungduydat.github.io/FCJ-Workshop/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]