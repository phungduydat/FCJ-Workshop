[{"uri":"https://phungduydat.github.io/FCJ-Workshop/2-prerequiste/2.1.1-createec2/","title":" Guide to Launching a Default EC2 Instance on AWS","tags":[],"description":"","content":"  üñ•Ô∏è Guide to Launching a Default EC2 Instance on AWS üìå Objective Launch an EC2 instance using default settings for application deployment or environment testing.\nüß∞ Prerequisites  A valid AWS account Signed in to AWS Console or AWS CLI installed A key pair created for SSH access (if needed)  üõ†Ô∏è Step-by-Step Instructions 1. Sign in to AWS Console Visit: https://console.aws.amazon.com/ec2/\n2. Launch an EC2 Instance Method 1: Using AWS Console  Go to EC2 Dashboard Click Launch Instance Enter name: MyEC2Default Choose AMI: Amazon Linux 2023 (or Amazon Linux 2) Instance Type: t2.micro (Free tier eligible) Key pair: Choose existing or create new Network Settings:  Allow SSH (port 22) Allow HTTP (port 80) if needed   Storage: Default 8 GB (gp2) Click Launch Instance   Method 2: Using AWS CLI aws ec2 run-instances --image-id ami-0c02fb55956c7d316 \\ # Amazon Linux 2 (us-east-1) --instance-type t2.micro \\  --key-name my-key \\  --security-groups default \\  --tag-specifications \u0026#39;ResourceType=instance,Tags=[{Key=Name,Value=MyEC2Default}]\u0026#39; "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/1-introduce/","title":"Introduction","tags":[],"description":"","content":"In the context of modern system operations‚Äîwhere rapid deployment, high resilience, and 24/7 availability are mandatory‚Äîmanual monitoring or basic alerting is no longer sufficient.\nToday\u0026rsquo;s systems require an intelligent monitoring solution capable of:\n Early anomaly detection Automated response Supporting escalation procedures when issues exceed acceptable thresholds   üïµÔ∏è‚Äç‚ôÇÔ∏è What is Continuous Monitoring? Continuous Monitoring is the process of collecting, analyzing, and tracking data from systems, applications, and infrastructure in an automated, continuous, and real-time manner to ensure:\n The system is always available and stable Issues are detected quickly Timely information is provided for automated or manual response  In DevOps, Continuous Monitoring helps the operations team:\n Track post-deployment application performance Analyze anomalous behavior or errors Improve MTTR (Mean Time To Resolution)   üö® What is Alerting? Alerting is the process of automatically generating notifications when unusual events or threshold breaches occur within a system.\nAn effective alerting system will:\n Monitor metrics or logs Send alerts via email, Slack, SMS, SNS, PagerDuty, or other tools Trigger automated responses or notify technical teams  Requirements for an effective alerting system:\n Accurate: avoid false positives Timely: respond as soon as an issue is detected Context-rich: provide sufficient information for investigation Clear escalation procedures based on severity   üéØ Workshop Objectives This workshop will equip you with the knowledge and skills needed to deploy an intelligent monitoring system for DevOps environments:\n ‚úÖ Implement Intelligent Monitoring \u0026amp; Alerting System for DevOps Processes From collecting metrics, logs, traces to setting up alerts and automated responses, you‚Äôll build a system that enables the DevOps team to:\n Proactively detect issues Reduce MTTR Improve system reliability and availability   ‚úÖ Anomaly Detection Integrate anomaly detection algorithms and tools to:\n Detect unusual behaviors early Prevent incidents before they escalate   ‚úÖ Automated Response Configure automated responses that allow the system to:\n Self-heal from failures Auto-scale with increased load Minimize manual intervention   ‚úÖ Escalation Procedures Develop tiered alerting procedures to:\n Ensure the right person receives the alert at the right time Avoid \u0026ldquo;alert fatigue\u0026rdquo; Increase incident management effectiveness   üõ† Workshop Content üìö Workshop Agenda  Monitoring Implementation Anomaly Detection Automated Response Escalation Procedures Dashboard Development Alert Tuning Operational Procedures Performance Optimization   üß† Ultimate Goal: Help you build an intelligent, automated monitoring system ready for real-world production environments.\n "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/2-prerequiste/2.1.4-createvpc/","title":"Preparing the Environment to Build a Docker Image for a Spring Boot Project","tags":[],"description":"","content":"Create VPC Lab VPC  Go to VPC service management console  Click Your VPC. Click Create VPC.    At the Create VPC page.  In the Name tag field, enter Lab VPC. In the IPv4 CIDR field, enter: 10.10.0.0/16. Click Create VPC.    "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/","title":"Session Management","tags":[],"description":"","content":"Working with Amazon Systems Manager - Session Manager Overview Amazon Systems Manager ‚Äì Session Manager is a fully managed AWS service that enables secure, auditable, and browser-based shell or CLI access to your Amazon EC2 instances and other AWS resources without requiring an inbound port (such as SSH or RDP) to be open.\nIn this lab, you will:\nLearn the core concepts of Session Manager and its role in secure system administration.\nPractice connecting to public and private EC2 instances in a VPC without using bastion hosts.\nExplore logging and auditing features integrated with AWS CloudTrail and Amazon S3 for compliance.\nUnderstand how Session Manager can improve security posture by eliminating direct inbound connections and centralizing access control.\nThis exercise will help DevOps teams reduce operational risk, simplify infrastructure access management, and enhance overall security visibility.\nContents  Introduction Prerequisites Monitoring Implementation Anomaly Detection Automated Response Escalation Procedures Dashboard Development Operational Procedures  Clean Up Resources  "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/2-prerequiste/2.1.2-createpublicsubnet/","title":"Create Public Subnet","tags":[],"description":"","content":"Create Public Subnet  Click Subnets.   Click Create subnet.  At the Create subnet page.   In the VPC ID section, click Lab VPC. In the Subnet name field, enter Lab Public Subnet. In the Availability Zone section, select the first Availability zone. In the field IPv4 CIRD block enter 10.10.1.0/24.   Scroll to the bottom of the page, click Create subnet.\n  Click Lab Public Subnet.\n   Click Actions. Click Edit subnet settings.  Click Enable auto-assign public IPv4 address.   Click Save.  Click Internet Gateways.   Click Create internet gateway.  At the Create internet gateway page.   In the Name tag field, enter Lab IGW. Click Create internet gateway.  After successful creation, click Actions.   Click Attach to VPC.  At the Attach to VPC page.   In the Available VPCs section, select Lab VPC. Click Attach internet gateway. Check the successful attaching process as shown below.  Next we will create a custom route table to assign to Lab Public Subnet.   Click Route Tables. Click Create route table.  At the Create route table page.   In the Name field, enter Lab Publicrtb. In the VPC section, select Lab VPC. Click Create route table.  After creating the route table successfully.   Click Edit routes.  At the Edit routes page.   Click Add route. In the Destination field, enter 0.0.0.0/0 In the Target section, select Internet Gateway and then select Lab IGW. Click Save changes.  Click the Subnet associations tab.   Click Edit subnet associations to proceed with the associate custom route table we just created in Lab Public Subnet.  At the Edit subnet associations page.   Click on Lab Public Subnet. Click Save associations.  Check that the route table information has been associated with Lab Public Subnet and the internet route information has been pointed to the Internet Gateway as shown below.  "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/2-prerequiste/","title":"Preparation Steps","tags":[],"description":"","content":"\rTo get started, you need to prepare an AWS environment including an EC2 instance to run Docker, connect it to Amazon ECR, and deploy your application using AWS CDK. Once deployed, you will be able to access the application via your web browser.\n\rIf you‚Äôre not familiar with the core components like EC2, ECR, or CDK, you can refer to the following resources:\n Introduction to Amazon EC2 Amazon Elastic Container Registry (ECR) AWS Cloud Development Kit (CDK)  In this section, we‚Äôll walk through the essential preparation steps to get your containerized application ready for deployment.\nOverview  Create an EC2 Instance and Set Up Docker Push a Docker Image to Amazon ECR Deploy the Application Using AWS CDK Verify the Deployment in Your Browser  "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/2-prerequiste/2.1.3-createprivatesubnet/","title":"Deploying an AWS CDK Project Connecting ECS, EC2, and IAM","tags":[],"description":"","content":"Create Private Subnet  Click Subnets.  Click Create subnet.    At the Create subnet page.  In the VPC ID section, click Lab VPC. In the Subnet name field, enter Lab Private Subnet. In the Availability Zone section, select the first Availability zone. In the field IPv4 CIRD block enter 10.10.2.0/24.    Scroll to the bottom of the page, click Create subnet.  The next step is to create the necessary security groups for the lab.\n"},{"uri":"https://phungduydat.github.io/FCJ-Workshop/3-monitoring/","title":"Monitoring Implementation","tags":[],"description":"","content":"Guide to Setting Up WebEnglish Infrastructure Monitoring on AWS Linux 2 1. Objectives  Monitor EC2 performance (CPU, RAM, Disk). Collect Spring Boot and MySQL logs. Send alerts via SNS. Display visual dashboards in CloudWatch.  Tools used: AWS CloudWatch, CloudWatch Agent, Amazon SNS.\n 2. Prerequisites EC2 Instance  Amazon Linux 2 Installed: Docker, Docker Compose, Java, MySQL (container or local)  Required IAM Role Permissions Attach an IAM role to the EC2 instance with:\n CloudWatchAgentServerPolicy AmazonSSMManagedInstanceCore Write permissions for logs and metrics in CloudWatch  Check role attached:\ncurl http://169.254.169.254/latest/meta-data/iam/security-credentials/ Install AWS CLI (if missing) sudo yum install unzip -y curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install aws --version Configure CLI (replace with your own credentials/region if needed):\naws configure  3. Install \u0026amp; Configure CloudWatch Agent Step 1: Install Agent cd /tmp curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm sudo rpm -U ./amazon-cloudwatch-agent.rpm Step 2: Create Configuration File sudo nano /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json Paste:\n{ \u0026#34;agent\u0026#34;: { \u0026#34;metrics_collection_interval\u0026#34;: 60, \u0026#34;logfile\u0026#34;: \u0026#34;/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\u0026#34;, \u0026#34;run_as_user\u0026#34;: \u0026#34;root\u0026#34; }, \u0026#34;metrics\u0026#34;: { \u0026#34;namespace\u0026#34;: \u0026#34;WebEnglishMetrics\u0026#34;, \u0026#34;append_dimensions\u0026#34;: { \u0026#34;InstanceId\u0026#34;: \u0026#34;${aws:InstanceId}\u0026#34;, \u0026#34;InstanceType\u0026#34;: \u0026#34;${aws:InstanceType}\u0026#34;, \u0026#34;AutoScalingGroupName\u0026#34;: \u0026#34;${aws:AutoScalingGroupName}\u0026#34; }, \u0026#34;aggregation_dimensions\u0026#34;: [[\u0026#34;InstanceId\u0026#34;]], \u0026#34;metrics_collected\u0026#34;: { \u0026#34;cpu\u0026#34;: { \u0026#34;measurement\u0026#34;: [ \u0026#34;cpu_usage_user\u0026#34;, \u0026#34;cpu_usage_system\u0026#34;, \u0026#34;cpu_usage_idle\u0026#34; ], \u0026#34;metrics_collection_interval\u0026#34;: 60, \u0026#34;totalcpu\u0026#34;: true }, \u0026#34;mem\u0026#34;: { \u0026#34;measurement\u0026#34;: [\u0026#34;mem_used_percent\u0026#34;], \u0026#34;metrics_collection_interval\u0026#34;: 60 }, \u0026#34;disk\u0026#34;: { \u0026#34;measurement\u0026#34;: [\u0026#34;used_percent\u0026#34;], \u0026#34;metrics_collection_interval\u0026#34;: 60, \u0026#34;resources\u0026#34;: [\u0026#34;*\u0026#34;] }, \u0026#34;diskio\u0026#34;: { \u0026#34;measurement\u0026#34;: [\u0026#34;io_time\u0026#34;], \u0026#34;metrics_collection_interval\u0026#34;: 60 }, \u0026#34;swap\u0026#34;: { \u0026#34;measurement\u0026#34;: [\u0026#34;swap_used_percent\u0026#34;], \u0026#34;metrics_collection_interval\u0026#34;: 60 } } } } Step 3: Start Agent sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \\  -a fetch-config \\  -m ec2 \\  -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \\  -s Step 4: Verify Agent sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a status  4. Create Alerts with SNS Step 1: Create Topic \u0026amp; Subscribe Email aws sns create-topic \\  --name WebEnglishAlerts \\  --region ap-northeast-1 Copy TopicArn from output.\naws sns subscribe \\  --topic-arn arn:aws:sns:ap-northeast-1:ACCOUNT_ID:WebEnglishAlerts \\  --protocol email \\  --notification-endpoint YOUR_EMAIL@example.com \\  --region ap-northeast-1 üìß Confirm the subscription in your email before continuing.  Step 2: Create CPU Alarm aws cloudwatch put-metric-alarm \\  --alarm-name HighCPUUsage \\  --metric-name cpu_usage_user \\  --namespace WebEnglishMetrics \\  --statistic Average \\  --period 300 \\  --threshold 80 \\  --comparison-operator GreaterThanThreshold \\  --evaluation-periods 1 \\  --alarm-actions arn:aws:sns:ap-northeast-1:ACCOUNT_ID:WebEnglishAlerts \\  --region ap-northeast-1  You can also push fake metrics to CloudWatch for testing:\naws cloudwatch put-metric-data \\  --metric-name cpu_usage_active \\  --namespace WebEnglishMetrics \\  --value 90 "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/4-anomaly-detection/","title":"Deploying Automatic Alerting and Response for WebEnglish","tags":[],"description":"","content":" üö® Implementing Automatic Alerts and Response with CloudWatch, SNS, and Lambda This document provides step-by-step guidance on integrating Amazon CloudWatch, SNS, Lambda, and optionally DevOps Guru to detect anomalies and automatically respond in the WebEnglish system.\n üéØ Objectives  Detect performance anomalies in EC2 or ECS. Send alerts via email and trigger Lambda for automated response. Automatically adjust the desired number of ECS service tasks or restart instances.   ‚úÖ 1. Create a CloudWatch Anomaly Detector Create an anomaly detector for the cpu_usage_active metric in the namespace WebEnglishMetrics.\naws cloudwatch put-anomaly-detector \\ --namespace \u0026#34;WebEnglishMetrics\u0026#34; \\ --metric-name \u0026#34;cpu_usage_active\u0026#34; \\ --stat \u0026#34;Average\u0026#34; \\ --dimensions Name=InstanceId,Value=i-0817b4fd50252b509 \\ --region ap-northeast-1  ‚úÖ 2. Create an SNS Topic and Subscribe an Email Create an SNS topic for sending alerts and subscribe an email endpoint.\naws sns create-topic --name WebEnglishAlerts --region ap-northeast-1 aws sns subscribe \\ --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --protocol email \\ --notification-endpoint your-email@example.com \\ --region ap-northeast-1  üì© Don‚Äôt forget to confirm the subscription via the email inbox.   ‚úÖ 3. Create a CloudWatch Alarm from the Anomaly Detector Set up an alarm to trigger when the cpu_usage_active metric exceeds the anomaly threshold.\naws cloudwatch put-metric-alarm \\ --alarm-name CPUAnomalyAlarm \\ --evaluation-periods 2 \\ --datapoints-to-alarm 2 \\ --treat-missing-data notBreaching \\ --comparison-operator GreaterThanUpperThreshold \\ --metrics \u0026#39;[ { \u0026#34;Id\u0026#34;: \u0026#34;m1\u0026#34;, \u0026#34;MetricStat\u0026#34;: { \u0026#34;Metric\u0026#34;: { \u0026#34;Namespace\u0026#34;: \u0026#34;WebEnglishMetrics\u0026#34;, \u0026#34;MetricName\u0026#34;: \u0026#34;cpu_usage_active\u0026#34;, \u0026#34;Dimensions\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;InstanceId\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;i-0817b4fd50252b509\u0026#34; } ] }, \u0026#34;Period\u0026#34;: 60, \u0026#34;Stat\u0026#34;: \u0026#34;Average\u0026#34; }, \u0026#34;ReturnData\u0026#34;: true }, { \u0026#34;Id\u0026#34;: \u0026#34;ad1\u0026#34;, \u0026#34;Expression\u0026#34;: \u0026#34;ANOMALY_DETECTION_BAND(m1, 2)\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;AnomalyDetectionBand\u0026#34;, \u0026#34;ReturnData\u0026#34;: true } ]\u0026#39; \\ --threshold-metric-id ad1 \\ --alarm-actions arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --region ap-northeast-1  ‚úÖ 4. Create a Lambda Function to Scale ECS A. Create an IAM Role Create the IAM role LambdaScaleECSRole with a trust policy for Lambda.\naws iam create-role \\ --role-name LambdaScaleECSRole \\ --assume-role-policy-document file://trust-policy.json trust-policy.json:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;lambda.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; } ] } B. Attach Required Policies Grant permissions for logging and ECS interactions.\naws iam attach-role-policy \\ --role-name LambdaScaleECSRole \\ --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole aws iam attach-role-policy \\ --role-name LambdaScaleECSRole \\ --policy-arn arn:aws:iam::aws:policy/AmazonECS_FullAccess  ‚úÖ 5. Create the Lambda Script scale_ecs_service.py This Python function updates the ECS service desired task count.\nimport boto3 def lambda_handler(event, context): ecs = boto3.client(\u0026#39;ecs\u0026#39;) cluster = \u0026#39;MyCluster\u0026#39; service = \u0026#39;WebenglishService\u0026#39; desired_count = 2 try: response = ecs.update_service( cluster=cluster, service=service, desiredCount=desired_count ) print(\u0026#34;Service updated:\u0026#34;, response[\u0026#39;service\u0026#39;][\u0026#39;serviceName\u0026#39;]) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: \u0026#39;Scaling executed\u0026#39; } except Exception as e: print(\u0026#34;Error:\u0026#34;, str(e)) return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;body\u0026#39;: str(e) } Zip the file:\nzip function.zip scale_ecs_service.py  ‚úÖ 6. Deploy the Lambda Function aws lambda create-function \\ --function-name ScaleWebEnglish \\ --runtime python3.9 \\ --role arn:aws:iam::\u0026lt;ACCOUNT_ID\u0026gt;:role/LambdaScaleECSRole \\ --handler scale_ecs_service.lambda_handler \\ --zip-file fileb://function.zip \\ --timeout 10 \\ --region ap-northeast-1  ‚úÖ 7. Link Lambda to SNS and Grant Permission Subscribe the Lambda function to the SNS topic.\naws sns subscribe \\ --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --protocol lambda \\ --notification-endpoint arn:aws:lambda:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:function:ScaleWebEnglish \\ --region ap-northeast-1 Grant SNS invoke permissions:\naws lambda add-permission \\ --function-name ScaleWebEnglish \\ --statement-id snsInvokePermission \\ --action lambda:InvokeFunction \\ --principal sns.amazonaws.com \\ --source-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --region ap-northeast-1  ‚úÖ 8. (Optional) Create a Step Function for Scaling ECS Use AWS Step Functions to orchestrate scaling.\nscale-ecs-step.json:\n{ \u0026#34;Comment\u0026#34;: \u0026#34;Scale ECS when high CPU\u0026#34;, \u0026#34;StartAt\u0026#34;: \u0026#34;ScaleService\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;ScaleService\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:states:::aws-sdk:ecs:updateService\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;Cluster\u0026#34;: \u0026#34;MyCluster\u0026#34;, \u0026#34;Service\u0026#34;: \u0026#34;WebenglishService\u0026#34;, \u0026#34;DesiredCount\u0026#34;: 2 }, \u0026#34;End\u0026#34;: true } } } Create Step Function Role aws iam create-role \\ --role-name StepFunctionExecutionRole \\ --assume-role-policy-document file://stepfunction-trust-policy.json aws iam attach-role-policy \\ --role-name StepFunctionExecutionRole \\ --policy-arn arn:aws:iam::aws:policy/AmazonECS_FullAccess Create the State Machine aws stepfunctions create-state-machine \\ --name ScaleWebEnglishStepFunction \\ --definition file://scale-ecs-step.json \\ --role-arn arn:aws:iam::\u0026lt;ACCOUNT_ID\u0026gt;:role/StepFunctionExecutionRole \\ --type STANDARD \\ --region ap-northeast-1  ‚úÖ 9. Test the System    Goal Test Method     Increase CPU stress-ng or Spring Boot endpoint   Lambda Logs CloudWatch Logs ‚Üí /aws/lambda/ScaleWebEnglish   Scale ECS Console ‚Üí WebenglishService   SNS Functionality Publish test message via CLI    Increase CPU (Ubuntu):\nsudo apt update \u0026amp;\u0026amp; sudo apt install stress-ng -y stress-ng --cpu 2 --timeout 300s Or Spring Boot endpoint:\n@GetMapping(\u0026#34;/load-cpu\u0026#34;) public String loadCpu() { while (true) { Math.pow(Math.random(), Math.random()); } } Invoke endpoint:\ncurl http://your-ecs-app/load-cpu Test SNS ‚Üí Lambda:\naws sns publish \\ --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --message \u0026#39;{\u0026#34;test\u0026#34;: \u0026#34;SNS to Lambda\u0026#34;}\u0026#39; \\ --region ap-northeast-1  ‚úÖ 10. Debug \u0026amp; Optimization Tips    Component Notes     Lambda Add explicit exception handling and detailed logging.   IAM Role Follow Least Privilege principle for permissions.   ECS Consider using a Target Tracking Policy instead of manual scaling in Lambda.   Alarm Tune evaluation-periods to reduce false positives.    üìå Manually test Lambda if needed:\naws lambda invoke \\ --function-name ScaleWebEnglish \\ --payload \u0026#39;{}\u0026#39; \\ output.json \\ --region ap-northeast-1 \r---\rDo you want me to now **convert this into a clean, ready-to-publish `.md` file** with all the images and formatting intact for your documentation site? That way it‚Äôs ready for Hugo or GitBook without further edits."},{"uri":"https://phungduydat.github.io/FCJ-Workshop/5-automated-response/","title":"Automated Response","tags":[],"description":"","content":"  üö® Deploying a Professional Alerting \u0026amp; Incident Escalation System  Objective: A multi-level alerting system that automatically detects anomalies, sends notifications to the right people, and responds automatically if required.\n  üìå 1. Designing a 3-Level Alert Workflow    Level Name Recipient Response Time Tool     1 Technical Alert (DevOps) DevOps Team ‚â§ 15 minutes Email / SNS   2 Urgent Alert (On-call) On-call Dev ‚â§ 5 minutes SNS + Lambda   3 Manager Alert Senior Manager During office hours Email / SMS     üß™ 2. Create SNS Topics and Subscriptions 2.1 Create SNS Topics aws sns create-topic --name WebEnglishAlert-Level1 aws sns create-topic --name WebEnglishAlert-Level2 aws sns create-topic --name WebEnglishAlert-Level3 2.2 Subscribe Emails to Topics (must confirm) aws sns subscribe \\  --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlert-Level1 \\  --protocol email \\  --notification-endpoint devops@example.com aws sns subscribe \\  --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlert-Level3 \\  --protocol email \\  --notification-endpoint ceo@example.com  ‚úÖ Check your email to confirm the subscription.   üìà 3. Create CloudWatch Alarm - Level 1 aws cloudwatch put-metric-alarm \\  --alarm-name CPU-High-Level1 \\  --alarm-description \u0026#34;High CPU Alert - Level 1\u0026#34; \\  --metric-name cpu_usage_active \\  --namespace WebEnglishMetrics \\  --statistic Average \\  --period 300 \\  --evaluation-periods 1 \\  --threshold 80 \\  --comparison-operator GreaterThanThreshold \\  --actions-enabled \\  --alarm-actions arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlert-Level1  üõ† 4. Escalation Lambda 4.1 Create IAM Role for Lambda trust-policy.json\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [{ \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;lambda.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; }] } aws iam create-role \\  --role-name LambdaAlertEscalatorRole \\  --assume-role-policy-document file://trust-policy.json aws iam attach-role-policy \\  --role-name LambdaAlertEscalatorRole \\  --policy-arn arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess aws iam attach-role-policy \\  --role-name LambdaAlertEscalatorRole \\  --policy-arn arn:aws:iam::aws:policy/AmazonSNSFullAccess  4.2 Lambda Code: alert_escalator.py import boto3 def lambda_handler(event, context): cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) sns = boto3.client(\u0026#39;sns\u0026#39;) alarm_name = \u0026#34;CPU-High-Level1\u0026#34; response = cloudwatch.describe_alarms(AlarmNames=[alarm_name]) if response[\u0026#39;MetricAlarms\u0026#39;] and response[\u0026#39;MetricAlarms\u0026#39;][0][\u0026#39;StateValue\u0026#39;] == \u0026#34;ALARM\u0026#34;: sns.publish( TopicArn=\u0026#34;arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlert-Level2\u0026#34;, Subject=\u0026#34;üö® Escalation Alert\u0026#34;, Message=f\u0026#34;Alarm {alarm_name}has not been handled. Escalating to Level 2.\u0026#34; )  4.3 Deploy Lambda Function zip function.zip alert_escalator.py aws lambda create-function \\  --function-name alertEscalator \\  --runtime python3.12 \\  --role arn:aws:iam::\u0026lt;ACCOUNT_ID\u0026gt;:role/LambdaAlertEscalatorRole \\  --handler alert_escalator.lambda_handler \\  --zip-file fileb://function.zip \\  --timeout 10  ‚úÖ You can test it in AWS Console ‚Üí Lambda ‚Üí Test   üìà 5. Create Alarm Triggering Lambda - Level 2 aws cloudwatch put-metric-alarm \\  --alarm-name CPU-High-Level2 \\  --alarm-description \u0026#34;CPU high alert escalation\u0026#34; \\  --metric-name cpu_usage_active \\  --namespace WebEnglishMetrics \\  --statistic Average \\  --period 600 \\  --evaluation-periods 2 \\  --threshold 80 \\  --comparison-operator GreaterThanThreshold \\  --actions-enabled \\  --alarm-actions arn:aws:lambda:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:function:alertEscalator  üîÅ Escalation Overview    Level Alarm Condition Action     1 CPU-High-Level1 1 √ó 5 min \u0026gt; 80% Send SNS Level 1 ‚Üí DevOps   2 CPU-High-Level2 2 √ó 10 min \u0026gt; 80% Call Lambda ‚Üí send SNS Level 2 (notify on-call Dev)   3 (optional) No response in 30m Send SNS Level 3 ‚Üí senior management via email/SMS     üìä 6. CloudWatch Anomaly Detection (Advanced Option) aws cloudwatch put-anomaly-detector \\  --namespace WebEnglishMetrics \\  --metric-name cpu_usage_active \\  --statistic Average \\  --dimensions Name=InstanceId,Value=i-xxxxxx  üåÄ 7. Step Functions (Optional Automated Response) Use to:\n Scale ECS Service Reboot EC2 Instance Trigger a sequence of actions when an incident is detected   üß™ 8. System Testing sudo yum install -y stress-ng stress-ng --cpu 4 --timeout 600s You can also push fake metrics to CloudWatch for testing:\naws cloudwatch put-metric-data \\  --metric-name cpu_usage_active \\  --namespace WebEnglishMetrics \\  --value 90 Check:\n Is SNS sending to the correct recipients? Was Lambda triggered? Was escalation executed? Were email confirmations completed?   üìò 9. Summary ‚úÖ Multi-level alerting system works as expected:\n CloudWatch monitors \u0026amp; detects anomalies SNS routes alerts to the correct recipients Lambda responds if alerts are not handled Extendable with Step Functions, PagerDuty, EC2 auto recovery\u0026hellip;    üß© Advanced Suggestions  Use CloudFormation / CDK to define the entire infrastructure as code Log into CloudWatch Logs for escalation tracking Create a Dead Letter Queue for Lambda in case of failures  \r---\rN·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ **ƒë∆∞a to√†n b·ªô b·∫£n ti·∫øng Anh n√†y th√†nh file `.md`** ƒë·ªÉ b·∫°n th√™m tr·ª±c ti·∫øp v√†o h·ªá th·ªëng Hugo ho·∫∑c GitBook. B·∫°n c√≥ mu·ªën m√¨nh t·∫°o file ƒë√≥ lu√¥n kh√¥ng?\r"},{"uri":"https://phungduydat.github.io/FCJ-Workshop/7-dashboard/","title":"Dashboard Development","tags":[],"description":"","content":"üìä Implementing Dashboards and Visual Reports for the WebEnglish Project This document provides a professional and detailed process for setting up dashboards and system data monitoring reports for the WebEnglish project. Monitoring is implemented using Amazon CloudWatch and Amazon QuickSight to deliver real-time visibility as well as strategic analytics, enabling the DevOps team to respond quickly to product issues.\n üéØ Objectives  Display the performance of EC2, containers, Spring Boot applications, and MySQL. Trigger alerts when anomalies are detected based on behavioral patterns. Provide regular visual reports for DevOps and senior management.   üß≠ Step 1: Access the CloudWatch Dashboard  Go to AWS Console ‚Üí Search for ‚ÄúCloudWatch‚Äù. Go to Dashboards ‚Üí Select or create a new dashboard.\n  üìä Step 2: Add Metric Charts  Click ‚ÄúAdd widget‚Äù ‚Üí Choose Line ‚Üí Click Next. In the ‚ÄúBrowse‚Äù section, select:  Region: Tokyo (or where your instance is running) Namespace: WebEnglishMetrics (as configured) Metric: cpu_usage_active\n    üìà Step 3: Add Anomaly Detection Band  In Graphed metrics, click ‚ÄúAdd math‚Äù ‚Üí choose ANOMALY_DETECTION_BAND(m1, 2)  m1 is the original metric ID. 2 is the sensitivity level.\n    üö® Step 4: Create an Alarm from the Metric  Go to the Actions tab ‚Üí Click ‚ÄúCreate Alarm‚Äù Select the metric cpu_usage_active Choose statistic type: Average Period: 5 minutes Conditions:  Threshold type: Anomaly detection Anomaly detection model: select the line ANOMALY_DETECTION_BAND(m1, 2)\n    ‚öôÔ∏è Step 5: Additional Configuration    Option Recommended setting     Datapoints to alarm 3 out of 5   Missing data treatment Treat missing data as missing   Actions suppression Skip if no other rule is in use    üèÅ Step 6: Name \u0026amp; Create Alarm  Name the alarm, for example: HighCPUWithAnomalyDetection Select an SNS topic if you want to send emails Click Create Alarm   üßæ Operational Tips  ‚è±Ô∏è Limit log retention: 7‚Äì14 days to reduce costs. üîî Configure alerts via SNS Topic to email or Lambda handler. üß™ Combine with AWS DevOps Guru for automatic root cause detection.   üìö References  CloudWatch Dashboards Amazon QuickSight Getting Started Anomaly Detection  "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/11-cleanup/","title":"Clean up","tags":[],"description":"","content":"We will proceed to clean up all AWS resources created during the practice session. Please follow the steps below to avoid incurring unnecessary charges.\n ‚úÖ Delete DevOps Guru  Go to the DevOps Guru Console On the left menu, choose Settings. Under CloudFormation stacks, click Delete for the DevOps Guru stack you activated. Confirm deletion if prompted.   ‚úÖ Destroy CDK Stack using cdk destroy  Open the terminal in the directory containing your CDK project. Run the following command to destroy the CDK stack: cdk destroy  When prompted, type y and press Enter. Wait for the stack destruction to complete.    ‚úÖ Delete S3 Bucket  Go to the S3 Console Select the buckets you created (e.g., cdk-bucket-*, log-bucket-*, etc.). Perform the following steps:  Click Empty ‚Üí Type permanently delete ‚Üí Click Empty. Then, click Delete ‚Üí Enter the bucket name ‚Üí Click Delete bucket.     ‚úÖ Delete CloudFormation Stack (if not using CDK)  Go to the CloudFormation Console Select the stacks related to the lab (e.g., DevOpsGuruStack, CDKStack, etc.). Click Delete and confirm deletion.   ‚úÖ Delete CloudWatch Logs / Alarms / Dashboards  Go to the CloudWatch Console  Delete Log Groups:\n Go to Logs \u0026gt; Log groups Select the log groups (e.g., /aws/lambda/..., /aws/events/...) Click Actions \u0026gt; Delete log groups  Delete Alarms:\n Go to Alarms \u0026gt; All alarms Select all alarms ‚Üí Click Actions \u0026gt; Delete  Delete Dashboards:\n Go to Dashboards Select dashboard ‚Üí Click Actions \u0026gt; Delete    ‚úÖ Terminate EC2 Instances  Go to the EC2 Console Go to Instances Select the instances to delete ‚Üí Click Instance state \u0026gt; Terminate instance Confirm Terminate    ‚úÖ Delete VPC  Go to the VPC Console Go to Your VPCs Select the VPC you created ‚Üí Click Actions \u0026gt; Delete VPC Confirm deletion   ‚úÖ Delete Subnets (if not automatically removed with VPC)  In the VPC Console ‚Üí Go to Subnets Select the related subnets (Public, Private) ‚Üí Click Actions \u0026gt; Delete subnet    ‚úÖ Note: After cleaning up, go to the Billing Dashboard to check for any remaining resources and ensure no extra costs are incurred.\n  "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/8-operations/","title":"Operational Procedures","tags":[],"description":"","content":"‚úÖ Operational Procedures \u0026amp; Optimization üîπ 1. Creating a Detailed Runbook A Runbook is a step-by-step guide for handling common incident scenarios, including:\n   Incident Scenario Symptoms Common Cause Detailed Resolution Steps Responsible Role     CPU at 100% CloudWatch alarm ‚ÄúHighCPUUsage‚Äù Sudden traffic spike 1. Check application logs 2. Verify running ECS containers 3. Scale ECS service by adding 1 task DevOps Engineer   Application not responding Client timeout, ‚ÄúTargetResponseTimeHigh‚Äù alarm ECS service overload or application bug 1. Check application logs 2. Manually scale the service if needed 3. Configure auto-scaling alarm DevOps Engineer     üìÅ Suggested storage location: /runbook/webenglish/ecs-cpu-spike.md\n  üîπ 2. Integrating AWS DevOps Guru üß† Introduction AWS DevOps Guru is a service that uses AI to detect anomalies and recommend remediation actions for your system.\nüéØ Key Benefits  Automatically detects incidents without manual rule configuration Analyzes logs, metrics, and traces Suggests root causes and remediation actions Integrates with SNS for alert notifications Provides visual representation via Anomaly Maps   üîπ 3. Enabling DevOps Guru for the System üîß Deployment Steps  Navigate to AWS Console \u0026gt; DevOps Guru Click Enable DevOps Guru Select the monitoring scope:  Analyze all AWS resources (monitor all resources) Or select a specific CloudFormation Stack   Configure SNS Topic for alerts (create one if not available) Click Enable   ‚è≥ DevOps Guru will start collecting data and provide insights within a few minutes to a few hours.\n  üîπ 4. Monitoring \u0026amp; Receiving Alerts üßæ Insight details include:  Affected resource name (ECS, RDS, Lambda‚Ä¶) Time of occurrence Abnormal metrics Suggested root cause Recommended remediation actions  üì© Setting up SNS for alerts  Create an SNS Topic: devops-guru-alerts Add subscribers: email, Lambda, webhook‚Ä¶   üîπ 5. Combining Services for Optimization    Service Purpose     DevOps Guru Automatic incident detection and analysis   SNS Send alerts to email, Slack, Lambda\u0026hellip;   CloudWatch Collect metrics, logs, and create monitoring charts   Notebook Custom queries and advanced analysis     üìå Advanced Recommendations  Deploy DevOps Guru to reduce incident investigation time Combine Amazon QuickSight + SNS to send scheduled reports Automate incident remediation using AWS Lambda or Systems Manager   üìö References  üîó AWS CloudWatch Log Insights üîó Auto Scaling ECS üîó AWS DevOps Guru üîó AWS Runbook Template  "},{"uri":"https://phungduydat.github.io/FCJ-Workshop/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://phungduydat.github.io/FCJ-Workshop/tags/","title":"Tags","tags":[],"description":"","content":""}]